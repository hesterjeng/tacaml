(* This file is generated by dune, edit dune-project instead *)

(** OCaml Bindings for TA-Lib

    `tacaml` provides OCaml bindings to the
    [TA-Lib (Technical Analysis Library)](https://ta-lib.org/). This library
    offers both raw C bindings and higher-level, type-safe wrappers for over 160
    technical analysis functions commonly used in financial markets.

    The core modules are:
    - {!module:Tacaml.C}: Raw C bindings to TA-Lib functions.
    - {!module:Tacaml.Safe}: Type-safe wrappers for TA-Lib indicators using
      GADTs.
    - {!module:Tacaml.Input}: Defines types for various input sources (e.g.,
      OHLCV data, float arrays).
    - {!module:Tacaml.Output}: Defines types for various output destinations.
    - {!module:Tacaml.Defaults}: Provides default values and lists of all
      supported indicators.
    - {!module:Tacaml.Indicator}: Defines the types of indicator outputs (Float,
      Int).

    Before using any TA-Lib functions, you must call {!val:Tacaml.initialize}.
*)

(**/**)

module Ohlcv : module type of Ohlcv
module C : module type of C.Functions
module Safe : module type of Safe
module Input : module type of Input
module Output : module type of Output
module Defaults : module type of Defaults
module Indicator : module type of Indicator
module Conv : module type of Conv
module Pack : module type of Pack

(**/**)

type t = Pack.t
(** The main type representing a packed indicator for calculation. It
    encapsulates an indicator, its input source, and its output destination. *)

val input : t -> Input.Flag.t
(** [input x] returns the input flag from an indicator. *)

val output : t -> Output.Flag.t
(** [output x] returns the output flag from an indicator. *)

val initialize : unit -> (unit, string) result
(** [initialize ()] initializes the TA-Lib library. This function must be called
    once before any other TA-Lib function is used. It returns [Ok ()] on
    success, or an [Error] with a TA-Lib error code on failure. *)

val calculate :
  ?i:int ->
  t ->
  Input.t ->
  Output.t ->
  (int * int, [> `FatalError of string | `TALibCode of int ]) result
(** [calculate packed_indicator input output] performs the calculation for the
    given packed indicator. It returns [Ok (start_idx, num_elements)] on
    success, where [start_idx] is the starting index of the output and
    [num_elements] is the number of elements calculated. On failure, it returns
    an [Error] with a TA-Lib error code. If i is passed, it will only calculate
    the indicators for position i, otherwise it will calculate them for the
    entire input. *)

val all : t list
(** [all] provides a list of all supported TA-Lib indicators. This is useful for
    introspection or dynamic indicator selection. *)

val to_string : t -> string
val pp : Format.formatter -> t -> unit
val of_string : string -> (t, string) result
val of_indicator : Indicator.t -> t
val get_indicators : t -> Indicator.t list
